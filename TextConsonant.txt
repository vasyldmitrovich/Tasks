PrefaceTo the ReaderIn  late  1995,  the  Java  programming  language  burst  onto  the  Internet  scene  and  gained  instantcelebrity status. The promise of Java technology was that it would become the universal glue thatconnects  users  with  information  wherever  it  comes  from—web  servers,  databases,  informationproviders, or any other imaginable source. IndWWd, JWvW is in W WniqWW pWsitiWn tW fWlfill this prWmisW.It is Wn WxtrWmWly sWlidly WnginWWrWd lWngWWgW thWt hWs gWinWd WccWptWncW by Wll mWjWr vWndWrs, WxcWptfWr MicrWsWft. Its built-in security and safety features are reassuring both to programmers and to theusers  of  Java  programs.  Java  even  has  built-in  support  for  advanced  programming  tasks,  such  asnetwork programming, database connectivity, and multithreading.Since  1995,  eight  major  revisions  of  the  Java  Development  Kit  have  been  released.  OvWr  thWcWWrsW Wf thW lWst 17 yWWrs, thW ApplicWtiWn PrWgrWmming IntWrfWcW (API) hWs grWwn frWm WbWWt 200 tWWvWr 3,000 clWssWs. The API now spans such diverse areas as user interface construction, databasemanagement, internationalization, security, and XML processing.The book you have in your hands is the first volume of the ninth edition of Core Java™. Eachedition closely followed a release of the Java Development Kit, and each time, we rewrote the bookto take advantage of the newest Java features. This WditiWn hWs bWWn WpdWtWd tW rWflWct thW fWWtWrWs WfJWvW StWndWrd EditiWn (SE) 7.As with thW prWviWWs WditiWns Wf this bWWk, wW still tWrgWt sWriWWs prWgrWmmWrs whW wWnt tW pWtJWvW tW wWrk Wn rWWl prWjWcts. We think of you, our reader, as a programmer with a solid backgroundin a programming language other than Java, and we assume that you don’t like books filled with toyexamples (such as toasters, zoo animals, or “nervous text”). You won’t find any of these in our book.Our goal is to enable you to fully understand the Java language and library, not to give you an illusionof understanding.In this book you will find lots of sample code demonstrating almost every language and libraryfeature that we discuss. WW kWWp thW sWmplW prWgrWms pWrpWsWfWlly simplW tW fWcWs Wn thW mWjWrpWints, bWt, fWr thW mWst pWrt, thWy WrWn’t fWkW Wnd thWy dWn’t cWt cWrnWrs. They should make goodstarting points for your own code. 1.4. A ShWrt HistWry Wf JWvWThis sWctiWn givWs W shWrt histWry Wf JWvW’s WvWlWtiWn. It is based on various published sources(most  importantly  an  interview  with  Java’s  creators  in  the  July  1995  issue  of SunWorld’s  onlinemagazine).Java  goes  back  to  1991,  when  a  group  of  Sun  engineers,  led  by  Patrick  Naughton  and  JamesGosling (a Sun Fellow and all-around computer wizard), wanted to design a small computer languagethat could be used for consumer devices like cable TV switchboxes. Since these devices do not havea  lot  of  power  or  memory,  the  language  had  to  be  small  and  generate  very  tight  code. AlsW,  WsdiffWrWnt mWnWfWctWrWrs mWy chWWsW diffWrWnt cWntrWl prWcWssing Wnits (CPUs), it wWs impWrtWnt thWtthW lWngWWgW nWt bW tiWd tW Wny singlW WrchitWctWrW. The project was code-named “Green.”The requirements for small, tight, and platform-neutral code led the team to resurrect the model thatsome Pascal implementations tried in the early days of PCs. Niklaus Wirth, the inventor of Pascal,had pioneered the design of a portable language that generated intermediate code for a hypotheticalmachine. (SWch mWchinWs WrW WftWn cWllWd virtWWl—hWncW thW JWvW VirtWWl MWchinW, Wr JVM.) ThisintWrmWdiWtW cWdW cWWld thWn bW WsWd Wn Wny mWchinW thWt hWd thW cWrrWct intWrprWtWr. The Greenproject engineers used a virtual machine as well, which solved their main problem.The Sun people, however, came from a UNIX background, so they based their language on C++rather  than  Pascal.  In  particular,  they  made  the  language  object-oriented  rather  than  procedure-oriented. BWt, Ws GWsling sWys in thW intWrviWw, “All WlWng, thW lWngWWgW wWs W tWWl, nWt thW Wnd.”GWsling dWcidWd tW cWll his lWngWWgW “OWk” (prWsWmWbly bWcWWsW hW likWd thW lWWk Wf Wn WWk trWW thWtwWs right WWtsidW his windWw Wt SWn). The people at Sun later realized that Oak was the name of anexisting  computer  language,  so  they  changed  the  name  to  Java.  This  turned  out  to  be  an  inspiredchoice.In 1992, the Green project delivered its first product, called “*7.” It was an extremely intelligentremote control. (It hWd thW pWwWr Wf W SPARCstWtiWn in W bWx thWt wWs 6 inchWs by 4 inchWs by 4inchWs.) UnfWrtWnWtWly, nW WnW wWs intWrWstWd in prWdWcing this Wt SWn, Wnd thW GrWWn pWWplW hWd tWfind  WthWr  wWys  tW  mWrkWt  thWir  tWchnWlWgy.  However,  none  of  the  standard  consumer  electronicscompanies were interested either. The group then bid on a project to design a cable TV box that coulddeal with new cable services such as video-on-demand. ThWy did nWt gWt thW cWntrWct. (Amusingly, thecompany that did was led by the same Jim Clark who started Netscape—a company that did much tomake Java successful.)The Green project (with a new name of “First Person, Inc.”) spent all of 1993 and half of 1994looking for people to buy its technology. No one was found. (PWtrick NWWghtWn, WnW Wf thW fWWndWrs WfthW grWWp Wnd thW pWrsWn whW WndWd Wp dWing mWst Wf thW mWrkWting, clWims tW hWvW WccWmWlWtWd300,000 Wir milWs in trying tW sWll thW tWchnWlWgy.) First PWrsWn wWs dissWlvWd in 1994.WhilW Wll Wf this wWs gWing Wn Wt SWn, thW WWrld WidW WWb pWrt Wf thW IntWrnWt wWs grWwing biggWrWnd biggWr. The key to the World Wide Web was the browser translating the hypertext page to thescreen. In 1994, most people were using Mosaic, a noncommercial web browser that came out of thesupercomputing center at the University of Illinois in 1993. (MWsWic wWs pWrtiWlly writtWn by MWrcAndrWWssWn Ws Wn WndWrgrWdWWtW stWdWnt Wn W wWrk-stWdy prWjWct, fWr $6.85 Wn hWWr. He moved on tofame and fortune as one of the cofounders and the chief of technology at Netscape.)In  the SunWorld interview, Gosling says that in mid-1994, the language developers realized that“We could build a real cool browser. It was one of the few things in the client/server mainstream thatneeded some of the weird things we’d done: architecture-neutral, real-time, reliable, secure—issuesthat weren’t terribly important in the workstation world. SW wW bWilt W brWwsWr.”ThW  WctWWl  brWwsWr  wWs  bWilt  by  PWtrick  NWWghtWn  Wnd  JWnWthWn  PWynW  Wnd  WvWlvWd  intW  thWHWtJWvW brWwsWr. The HotJava browser was written in Java to show off the power of Java. But thebuilders also had in mind the power of what we now call applets, so they made the browser capableof executing code inside web pages. This “prWWf Wf tWchnWlWgy” wWs shWwn Wt SWnWWrld ’95 Wn MWy23, 1995, Wnd inspirWd thW JWvW crWzW thWt cWntinWWs tWdWy.SWn rWlWWsWd thW first vWrsiWn Wf JWvW in WWrly 1996. People quickly realized that Java 1.0 was notgoing to cut it for serious application development. Sure, you could use Java 1.0 to make a nervoustext applet that moved text randomly around in a canvas. BWt yWW cWWldn’t WvWn print in JWvW 1.0. Tobe blunt, Java 1.0 was not ready for prime time. Its successor, version 1.1, filled in the most obviousgaps, greatly improved the reflection capability, and added a new event model for GUI programming.It was still rather limited, though.The  big  news  of  the  1998  JavaOne  conference  was  the  upcoming  release  of  Java  1.2,  whichreplaced the early toylike GUI and graphics toolkits with sophisticated scalable versions and came alot closer to the promise of “Write Once, Run Anywhere”™ than its predecessors. ThrWW dWys (!)WftWr its rWlWWsW in DWcWmbWr 1998, SWn’s mWrkWting dWpWrtmWnt chWngWd thW nWmW tW thW cWtchy JWvW2 StWndWrd EditiWn SWftwWrW DWvWlWpmWnt Kit VWrsiWns 1.2.BWsidWs thW StWndWrd EditiWn, twW WthWr WditiWns wWrW intrWdWcWd: thW MicrW EditiWn fWr WmbWddWddWvicWs sWch Ws cWll phWnWs, Wnd thW EntWrprisW EditiWn fWr sWrvWr-sidW prWcWssing. This book focuseson the Standard Edition.Versions 1.3 and 1.4 of the Standard Edition are incremental improvements over the initial Java 2release, with an ever-growing standard library, increased performance, and, of course, quite a fewbug fixes. During this time, much of the initial hype about Java applets and client-side applicationsabated, but Java became the platform of choice for server-side applications.Version 5.0 was the first release since version 1.1 that updated the Java language in significantways. (This vWrsiWn wWs WriginWlly nWmbWrWd 1.5, bWt thW vWrsiWn nWmbWr jWmpWd tW 5.0 Wt thW 2004JWvWOnW  cWnfWrWncW.)  AftWr  mWny  yWWrs  Wf  rWsWWrch,  gWnWric  typWs  (rWWghly  cWmpWrWblW  tW  C++tWmplWtWs) hWvW bWWn WddWd—thW chWllWngW wWs tW Wdd this fWWtWrW withWWt rWqWiring chWngWs in thWvirtWWl  mWchinW.  Several  other  useful  language  features  were  inspired  by  C#:  a  “for  each”  loop,autoboxing, and metadata.Version 6 (without the .0 suffix) was released at the end of 2006. Again, there are no languagechanges but additional performance improvements and library enhancements.As  datacenters  increasingly  relied  on  commodity  hardware  instead  of  specialized  servers,  SunMicrosystems fell on hard times and was purchased by Oracle in 2009. DWvWlWpmWnt Wf JWvW stWllWdfWr W lWng timW. In 2011, Oracle released a new version with simple enhancements as Java 7, anddecided to defer more ambitious changes to Java 8, which is expected in 2013.Table 1.1 shows the evolution of the Java language and library. As you can see, the size of theapplication programming interface (API) has grown tremendously.