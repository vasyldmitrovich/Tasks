PrefaceTo the ReaderIn  late  1995,  the  Java  programming  language  burst  onto  the  Internet  scene  and  gained  instantcelebrity status. The promise of Java technology was that it would become the universal glue thatconnects  users  with  information  wherever  it  comes  from—web  servers,  databases,  informationproviders, or any other imaginable source. Indeed, Java is in a unique position to fulfill this promise.It is an extremely solidly engineered language that has gained acceptance by all major vendors, exceptfor Microsoft. Its built-in security and safety features are reassuring both to programmers and to theusers  of  Java  programs.  Java  even  has  built-in  support  for  advanced  programming  tasks,  such  asnetwork programming, database connectivity, and multithreading.Since  1995,  eight  major  revisions  of  the  Java  Development  Kit  have  been  released.  Over  thecourse of the last 17 years, the Application Programming Interface (API) has grown from about 200 toover 3,000 classes. The API now spans such diverse areas as user interface construction, databasemanagement, internationalization, security, and XML processing.The book you have in your hands is the first volume of the ninth edition of Core Java™. Eachedition closely followed a release of the Java Development Kit, and each time, we rewrote the bookto take advantage of the newest Java features. This edition has been updated to reflect the features ofJava Standard Edition (SE) 7.As with the previous editions of this book, we still target serious programmers who want to putJava to work on real projects. We think of you, our reader, as a programmer with a solid backgroundin a programming language other than Java, and we assume that you don’t like books filled with toyexamples (such as toasters, zoo animals, or “nervous text”). You won’t find any of these in our book.Our goal is to enable you to fully understand the Java language and library, not to give you an illusionof understanding.In this book you will find lots of sample code demonstrating almost every language and libraryfeature that we discuss. We keep the sample programs purposefully simple to focus on the majorpoints, but, for the most part, they aren’t fake and they don’t cut corners. They should make goodstarting points for your own code. 1.4. A Short History of JavaThis section gives a short history of Java’s evolution. It is based on various published sources(most  importantly  an  interview  with  Java’s  creators  in  the  July  1995  issue  of SunWorld’s  onlinemagazine).Java  goes  back  to  1991,  when  a  group  of  Sun  engineers,  led  by  Patrick  Naughton  and  JamesGosling (a Sun Fellow and all-around computer wizard), wanted to design a small computer languagethat could be used for consumer devices like cable TV switchboxes. Since these devices do not havea  lot  of  power  or  memory,  the  language  had  to  be  small  and  generate  very  tight  code. Also,  as
different manufacturers may choose different central processing units (CPUs), it was important thatthe language not be tied to any single architecture. The project was code-named “Green.”The requirements for small, tight, and platform-neutral code led the team to resurrect the model thatsome Pascal implementations tried in the early days of PCs. Niklaus Wirth, the inventor of Pascal,had pioneered the design of a portable language that generated intermediate code for a hypotheticalmachine. (Such machines are often called virtual—hence the Java Virtual Machine, or JVM.) Thisintermediate code could then be used on any machine that had the correct interpreter. The Greenproject engineers used a virtual machine as well, which solved their main problem.The Sun people, however, came from a UNIX background, so they based their language on C++rather  than  Pascal.  In  particular,  they  made  the  language  object-oriented  rather  than  procedure-oriented. But, as Gosling says in the interview, “All along, the language was a tool, not the end.”Gosling decided to call his language “Oak” (presumably because he liked the look of an oak tree thatwas right outside his window at Sun). The people at Sun later realized that Oak was the name of anexisting  computer  language,  so  they  changed  the  name  to  Java.  This  turned  out  to  be  an  inspiredchoice.In 1992, the Green project delivered its first product, called “*7.” It was an extremely intelligentremote control. (It had the power of a SPARCstation in a box that was 6 inches by 4 inches by 4inches.) Unfortunately, no one was interested in producing this at Sun, and the Green people had tofind  other  ways  to  market  their  technology.  However,  none  of  the  standard  consumer  electronicscompanies were interested either. The group then bid on a project to design a cable TV box that coulddeal with new cable services such as video-on-demand. They did not get the contract. (Amusingly, thecompany that did was led by the same Jim Clark who started Netscape—a company that did much tomake Java successful.)The Green project (with a new name of “First Person, Inc.”) spent all of 1993 and half of 1994looking for people to buy its technology. No one was found. (Patrick Naughton, one of the founders ofthe group and the person who ended up doing most of the marketing, claims to have accumulated300,000 air miles in trying to sell the technology.) First Person was dissolved in 1994.While all of this was going on at Sun, the World Wide Web part of the Internet was growing biggerand bigger. The key to the World Wide Web was the browser translating the hypertext page to thescreen. In 1994, most people were using Mosaic, a noncommercial web browser that came out of thesupercomputing center at the University of Illinois in 1993. (Mosaic was partially written by MarcAndreessen as an undergraduate student on a work-study project, for $6.85 an hour. He moved on tofame and fortune as one of the cofounders and the chief of technology at Netscape.)In  the SunWorld interview, Gosling says that in mid-1994, the language developers realized that“We could build a real cool browser. It was one of the few things in the client/server mainstream thatneeded some of the weird things we’d done: architecture-neutral, real-time, reliable, secure—issuesthat weren’t terribly important in the workstation world. So we built a browser.”The  actual  browser  was  built  by  Patrick  Naughton  and  Jonathan  Payne  and  evolved  into  theHotJava browser. The HotJava browser was written in Java to show off the power of Java. But thebuilders also had in mind the power of what we now call applets, so they made the browser capableof executing code inside web pages. This “proof of technology” was shown at SunWorld ’95 on May23, 1995, and inspired the Java craze that continues today.Sun released the first version of Java in early 1996. People quickly realized that Java 1.0 was not
going to cut it for serious application development. Sure, you could use Java 1.0 to make a nervoustext applet that moved text randomly around in a canvas. But you couldn’t even print in Java 1.0. Tobe blunt, Java 1.0 was not ready for prime time. Its successor, version 1.1, filled in the most obviousgaps, greatly improved the reflection capability, and added a new event model for GUI programming.It was still rather limited, though.The  big  news  of  the  1998  JavaOne  conference  was  the  upcoming  release  of  Java  1.2,  whichreplaced the early toylike GUI and graphics toolkits with sophisticated scalable versions and came alot closer to the promise of “Write Once, Run Anywhere”™ than its predecessors. Three days (!)after its release in December 1998, Sun’s marketing department changed the name to the catchy Java2 Standard Edition Software Development Kit Versions 1.2.Besides the Standard Edition, two other editions were introduced: the Micro Edition for embeddeddevices such as cell phones, and the Enterprise Edition for server-side processing. This book focuseson the Standard Edition.Versions 1.3 and 1.4 of the Standard Edition are incremental improvements over the initial Java 2release, with an ever-growing standard library, increased performance, and, of course, quite a fewbug fixes. During this time, much of the initial hype about Java applets and client-side applicationsabated, but Java became the platform of choice for server-side applications.Version 5.0 was the first release since version 1.1 that updated the Java language in significantways. (This version was originally numbered 1.5, but the version number jumped to 5.0 at the 2004JavaOne  conference.)  After  many  years  of  research,  generic  types  (roughly  comparable  to  C++templates) have been added—the challenge was to add this feature without requiring changes in thevirtual  machine.  Several  other  useful  language  features  were  inspired  by  C#:  a  “for  each”  loop,autoboxing, and metadata.Version 6 (without the .0 suffix) was released at the end of 2006. Again, there are no languagechanges but additional performance improvements and library enhancements.As  datacenters  increasingly  relied  on  commodity  hardware  instead  of  specialized  servers,  SunMicrosystems fell on hard times and was purchased by Oracle in 2009. Development of Java stalledfor a long time. In 2011, Oracle released a new version with simple enhancements as Java 7, anddecided to defer more ambitious changes to Java 8, which is expected in 2013.Table 1.1 shows the evolution of the Java language and library. As you can see, the size of theapplication programming interface (API) has grown tremendously.