PrefaceTo the ReaderIn late 1995, the Java programming language burst onto the Internet scene and gained instantcelebrity status. THE PROMISE OF JAVA TECHNOLOGY WAS THAT IT WOULD BECOME THE UNIVERSAL GLUE THAT CONNECTS USERS WITH INFORMATION WHEREVER IT COMES FROM—WEB SERVERS, DATABASES, INFORMATION PROVIDERS, OR ANY OTHER IMAGINABLE SOURCE. Indeed, Java is in a unique position to fulfill this promise. IT IS AN EXTREMELY SOLIDLY ENGINEERED LANGUAGE THAT HAS GAINED ACCEPTANCE BY ALL MAJOR VENDORS, EXCEPT FOR MICROSOFT. Its built-in security and safety features are reassuring both to programmers and to the users of Java programs. JAVA EVEN HAS BUILT-IN SUPPORT FOR ADVANCED PROGRAMMING TASKS, SUCH AS NETWORK PROGRAMMING, DATABASE CONNECTIVITY, AND MULTITHREADING. Since 1995, eight major revisions of the Java Development Kit have been released. OVER THE COURSE OF THE LAST 17 YEARS, THE APPLICATION PROGRAMMING INTERFACE (API) HAS GROWN FROM ABOUT 200 TO OVER 3,000 CLASSES. The API now spans such diverse areas as user interface construction, database management, internationalization, security, and XML processing. THE BOOK YOU HAVE IN YOUR HANDS IS THE FIRST VOLUME OF THE NINTH EDITION OF CORE JAVA™. Each edition closely followed a release of the Java Development Kit, and each time, we rewrote the book to take advantage of the newest Java features. THIS EDITION HAS BEEN UPDATED TO REFLECT THE FEATURES OFJAVA STANDARD EDITION (SE) 7. As with the previous editions of this book, we still target serious programmers who want to put Java to work on real projects. WE THINK OF YOU, OUR READER, AS A PROGRAMMER WITH A SOLID BACKGROUND IN A PROGRAMMING LANGUAGE OTHER THAN JAVA, AND WE ASSUME THAT YOU DON’T LIKE BOOKS FILLED WITH TOY EXAMPLES (SUCH AS TOASTERS, ZOO ANIMALS, OR “NERVOUS TEXT”). You won’t find any of these in our book. OUR GOAL IS TO ENABLE YOU TO FULLY UNDERSTAND THE JAVA LANGUAGE AND LIBRARY, NOT TO GIVE YOU AN ILLUSION OF UNDERSTANDING. In this book you will find lots of sample code demonstrating almost every language and library feature that we discuss. WE KEEP THE SAMPLE PROGRAMS PURPOSEFULLY SIMPLE TO FOCUS ON THE MAJOR POINTS, BUT, FOR THE MOST PART, THEY ARE N’T FAKE AND THEY DON’T CUT CORNERS. They should make good starting points for your own code. 1.4. A Short History of Java This section gives a short history of Java’s evolution. IT IS BASED ON VARIOUS PUBLISHED SOURCES (MOST IMPORTANTLY AN INTERVIEW WITH JAVA’S CREATORS IN THE JULY 1995 ISSUE OF SUNWORLD’S  ONLINE MAGAZINE). Java goes back to 1991, when a group of Sun engineers, led by Patrick Naughton and JamesGosling (a Sun Fellow and all-around computer wizard), wanted to design a small computer language that could be used for consumer devices like cable TV switch boxes. SINCE THESE DEVICES DO NOT HAVE A LOT OF POWER OR MEMORY, THE LANGUAGE HAD TO BE SMALL AND GENERATE VERY TIGHT CODE. Also, asdifferent manufacturers may choose different central processing units (CPUs), it was important that the language not be tied to any single architecture. THE PROJECT WAS CODE-NAMED “GREEN.” THE REQUIREMENTS FOR SMALL, TIGHT, AND PLATFORM-NEUTRAL CODE LED THE TEAM TO RESURRECT THE MODEL THAT SOME PASCAL IMPLEMENTATIONS TRIED IN THE EARLY DAYS OF PCS. Niklaus Wirth, the inventor of Pascal, had pioneered the design of a portable language that generated intermediate code for a hypothetical machine. (SUCH MACHINES ARE OFTEN CALLED VIRTUAL—HENCE THE JAVA VIRTUAL MACHINE, OR JVM.) THIS INTERMEDIATE CODE COULD THEN BE USED ON ANY MACHINE THAT HAD THE CORRECT INTERPRETER. The Green project engineers used a virtual machine as well, which solved their main problem. THE SUN PEOPLE, HOWEVER, CAME FROM A UNIX BACKGROUND, SO THEY BASED THEIR LANGUAGE ON C++ RATHER THAN PASCAL. In particular, they made the language object-oriented rather than procedure-oriented. BUT, AS GOSLING SAYS IN THE INTERVIEW, “ALL ALONG, THE LANGUAGE WAS A TOOL, NOT THE END.”. Gosling decided to call his language “Oak” (presumably because he liked the look of an oak tree that was right outside his window at Sun). THE PEOPLE AT SUN LATER REALIZED THAT OAK WAS THE NAME OF AN EXISTING COMPUTER LANGUAGE, SO THEY CHANGED THE NAME TO JAVA. This turned out to be an inspired choice. IN 1992, THE GREEN PROJECT DELIVERED ITS FIRST PRODUCT, CALLED “*7.” IT WAS AN EXTREMELY INTELLIGENT REMOTE CONTROL. (It had the power of a SPARC station in a box that was 6 inches by 4 inches by 4inches.) Unfortunately, no one was interested in producing this at Sun, and the Green people had to find other ways to market their technology. HOWEVER, NONE OF THE STANDARD CONSUMER ELECTRONICS COMPANIES WERE INTERESTED EITHER. The group then bid on a project to design a cable TV box that could deal with new cable services such as video-on-demand. THEY DID NOT GET THE CONTRACT. (Amusingly, the company that did was led by the same Jim Clark who started Netscape—a company that did much to make Java successful.). THE GREEN PROJECT (WITH A NEW NAME OF “FIRST PERSON, INC.”) SPENT ALL OF 1993 AND HALF OF 1994LOOKING FOR PEOPLE TO BUY ITS TECHNOLOGY. No one was found. (PATRICK NAUGHTON, ONE OF THE FOUNDERS OF THE GROUP AND THE PERSON WHO ENDED UP DOING MOST OF THE MARKETING, CLAIMS TO HAVE ACCUMULATED 300,000 AIR MILES IN TRYING TO SELL THE TECHNOLOGY.). First Person was dissolved in 1994. WHILE ALL OF THIS WAS GOING ON AT SUN, THE WORLD WIDE WEB PART OF THE INTERNET WAS GROWING BIGGER AND BIGGER. The key to the World Wide Web was the browser translating the hypertext page to the screen. IN 1994, MOST PEOPLE WERE USING MOSAIC, A NONCOMMERCIAL WEB BROWSER THAT CAME OUT OF THE SUPERCOMPUTING CENTER AT THE UNIVERSITY OF ILLINOIS IN 1993. (Mosaic was partially written by Marc Andreessen as an undergraduate student on a work-study project, for $6.85 an hour. HE MOVED ON TO FAME AND FORTUNE AS ONE OF THE COFOUNDERS AND THE CHIEF OF TECHNOLOGY AT NETSCAPE.). In the Sun World interview, Gosling says that in mid-1994, the language developers realized that We could build a real cool browser. IT WAS ONE OF THE FEW THINGS IN THE CLIENT/SERVER MAINSTREAM THAT NEEDED SOME OF THE WEIRD THINGS WE’D DONE: ARCHITECTURE-NEUTRAL, REAL-TIME, RELIABLE, SECURE—ISSUES THAT WEREN’T TERRIBLY IMPORTANT IN THE WORKSTATION WORLD. So we built a browser. THE ACTUAL BROWSER WAS BUILT BY PATRICK NAUGHTON AND JONATHAN PAYNE AND EVOLVED INTO THE HOT JAVA BROWSER. The Hot Java browser was written in Java to show off the power of Java. BUT THE BUILDERS ALSO HAD IN MIND THE POWER OF WHAT WE NOW CALL APPLETS, SO THEY MADE THE BROWSER CAPABLE OF EXECUTING CODE INSIDE WEB PAGES. This “proof of technology” was shown at Sun World’95 on May23, 1995, and inspired the Java craze that continues today. SUN RELEASED THE FIRST VERSION OF JAVA IN EARLY 1996. People quickly realized that Java 1.0 was notgoing to cut it for serious application development. SURE, YOU COULD USE JAVA 1.0 TO MAKE A NERVOUS TEXT APPLET THAT MOVED TEXT RANDOMLY AROUND IN A CANVAS. But you couldn’t even print in Java 1.0. TOBE BLUNT, JAVA 1.0 WAS NOT READY FOR PRIME TIME. Its successor, version 1.1, filled in the most obvious gaps, greatly improved the reflection capability, and added a new event model for GUI programming. IT WAS STILL RATHER LIMITED, THOUGH. The big news of the 1998 Java One conference was the upcoming release of Java  1.2, which replaced the early toy like GUI and graphics tool kits with sophisticated scalable versions and came a lot closer to the promise of “Write Once, Run Anywhere than its predecessors. THREE DAYS AFTER ITS RELEASE IN DECEMBER 1998, SUN’S MARKETING DEPARTMENT CHANGED THE NAME TO THE CATCHY JAVA2 STANDARD EDITION SOFTWARE DEVELOPMENT KIT VERSIONS 1.2. Besides the Standard Edition, two other editions were introduced: the Micro Edition for embedded devices such as cell phones, and the Enterprise Edition for server-side processing. THIS BOOK FOCUSES ON THE STANDARD EDITION. Versions 1.3 and 1.4 of the Standard Edition are incremental improvements over the initial Java 2release, with an ever-growing standard library, increased performance, and, of course, quite a few bug fixes. DURING THIS TIME, MUCH OF THE INITIAL HYPE ABOUT JAVA APPLETS AND CLIENT-SIDE APPLICATIONS ABATED, BUT JAVA BECAME THE PLATFORM OF CHOICE FOR SERVER-SIDE APPLICATIONS. Version 5.0 was the first release since version 1.1 that updated the Java language in significant ways. (THIS VERSION WAS ORIGINALLY NUMBERED 1.5, BUT THE VERSION NUMBER JUMPED TO 5.0 AT THE 2004 JAVAONE CONFERENCE.) AFTER MANY YEARS OF RESEARCH, GENERIC TYPES (ROUGHLY COMPARABLE TO C++ TEMPLATES) HAVE BEEN ADDED THE CHALLENGE WAS TO ADD THIS FEATURE WITHOUT REQUIRING CHANGES IN THE VIRTUAL  MACHINE. Several other useful language features were inspired by C#: a “for each” loop, autoboxing, and metadata. VERSION 6 (WITHOUT THE .0 SUFFIX) WAS RELEASED AT THE END OF 2006. Again, there are no language changes but additional performance improvements and library enhancements. AS DATA CENTERS INCREASINGLY RELIED ON COMMODITY HARDWARE INSTEAD OF SPECIALIZED SERVERS, SUN MICRO SYSTEMS FELL ON HARD TIMES AND WAS PURCHASED BY ORACLE IN 2009. Development of Java stalled for a long time. IN 2011, ORACLE RELEASED A NEW VERSION WITH SIMPLE ENHANCEMENTS AS JAVA 7, AND DECIDED TO DEFER MORE AMBITIOUS CHANGES TO JAVA 8, WHICH IS EXPECTED IN 2013. Table 1.1 shows the evolution of the Java language and library. AS YOU CAN SEE, THE SIZE OF THE APPLICATION PROGRAMMING INTERFACE (API) HAS GROWN TREMENDOUSLY